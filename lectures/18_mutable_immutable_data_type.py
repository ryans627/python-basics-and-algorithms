# 每一个变量的存储的数据类型在内存中都有一个地址编号

"""
可变数据类型
    列表
    字典
    集合
不可变数据类型
    字符串
    整数
    布尔类型
    浮点数
    元组
"""

str1 = "abc"
# 使用id()内建函数获取字符串内存：地址编号，每次运行都是随机分配的地址
# python解释器3.10之前的版本每次运行都是随机分配的地址，3.11之后内存编号固定
# str1: 内存编号xxxxxxx => 编号下面保存的实际值 "abc"
print(f"字符串数据内容为：{str1}, 它的类型{type(str1)}, 它的内存地址编号是:{id(str1)}")
# 字符串数据内容为：abc, 它的类型<class 'str'>, 它的内存地址编号是:4306176160

str1 = str1.replace("b", "d")
print(f"字符串数据内容为：{str1}, 它的类型{type(str1)}, 它的内存地址编号是:{id(str1)}")
# 字符串数据内容为：adc, 它的类型<class 'str'>, 它的内存地址编号是:4306703040
# 字符串的值一旦发生变化，内存编号也变化 => 不可变数据类型
print("-" * 100)

# 可变数据类型
list1 = [1, 2, 3]
print(f"列表数据内容为：{list1}, 它的类型{type(list1)}, 它的内存地址编号是:{id(list1)}")
# 列表数据内容为：[1, 2, 3], 它的类型<class 'list'>, 它的内存地址编号是:4377556736

# 往列表中新增一个数据
list1.append(4)
print(f"列表数据内容为：{list1}, 它的类型{type(list1)}, 它的内存地址编号是:{id(list1)}")
# 列表数据内容为：[1, 2, 3, 4], 它的类型<class 'list'>, 它的内存地址编号是:4377556736
# 内容变化，但是内存地址不变 => 可变数据类型
print("-" * 100)

# 可用的字典键
dict1 = {"1": 2}
print(dict1)
dict1 = {1: 2}
print(dict1)
dict1 = {True: 3}
dict1 = {(3, 4): 2}

# 不可用的字典键
# dict1 = {[3, 4]: 2} # TypeError: unhashable type: 'list'